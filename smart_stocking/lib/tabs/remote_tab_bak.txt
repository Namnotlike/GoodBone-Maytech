import 'dart:async';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'package:flutter_icons/flutter_icons.dart';
import 'package:provider/provider.dart';

import 'package:wordpress_app/blocs/config_bloc.dart';
import 'package:wordpress_app/blue-plus/screens/device_screen.dart';
import 'package:wordpress_app/blue-plus/utils/snackbar.dart';
import 'package:wordpress_app/blue-plus/widgets/connected_device_tile.dart';
import 'package:wordpress_app/blue-plus/widgets/scan_result_tile.dart';
import 'package:wordpress_app/config/config.dart';
import 'package:wordpress_app/models/article.dart';
import 'package:wordpress_app/utils/empty_image.dart';

class RemoteTab extends StatefulWidget {
  const RemoteTab({Key? key}) : super(key: key);

  @override
  State<RemoteTab> createState() => _RemoteTabState();
}

class _RemoteTabState extends State<RemoteTab>
    with AutomaticKeepAliveClientMixin {
  bool _hasConnectedDevice = false;

  final List<Article> _articles = [];
  ScrollController? _controller;
  bool _loading = false;
  bool? _hasData = false;
  bool _isOn = false;
  var scaffoldKey = GlobalKey<ScaffoldState>();
  List<bool> _selectedFruits = <bool>[true, false, false, false];
  List<Widget> modes = <Widget>[
    Text('M1'),
    Text('M2'),
    Text('M3'),
    Text('Massage')
  ];
  List<int> times = <int>[5, 10, 15, 20, 30, 45, 60];
  int timeSelect = 10;
  int currentMode = 0;
  List<Widget> statusList = <Widget>[
    Text('ON'),
    Text('OFF'),
  ];

  List<bool> _selectedStatus = <bool>[true, false];
  List<BluetoothDevice> _connectedDevices = [];
  List<ScanResult> _scanResults = [];
  bool _isScanning = false;
  late StreamSubscription<List<ScanResult>> _scanResultsSubscription;
  late StreamSubscription<bool> _isScanningSubscription;

  @override
  void initState() {
    super.initState();

    FlutterBluePlus.systemDevices.then((devices) {
      _connectedDevices = devices;
      setState(() {});
    });

    _scanResultsSubscription = FlutterBluePlus.scanResults.listen((results) {
      _scanResults = results;
      setState(() {});
    }, onError: (e) {
      Snackbar.show(ABC.b, prettyException("Scan Error:", e), success: false);
    });

    _isScanningSubscription = FlutterBluePlus.isScanning.listen((state) {
      _isScanning = state;
      setState(() {});
    });
  }

  @override
  void dispose() {
    _scanResultsSubscription.cancel();
    _isScanningSubscription.cancel();
    super.dispose();
  }

  Future onScanPressed() async {
    try {
      // android is slow when asking for all advertisments,
      // so instead we only ask for 1/8 of them
      int divisor = Platform.isAndroid ? 8 : 1;
      await FlutterBluePlus.startScan(
          timeout: const Duration(seconds: 15),
          continuousUpdates: true,
          continuousDivisor: divisor);
    } catch (e) {
      Snackbar.show(ABC.b, prettyException("Start Scan Error:", e),
          success: false);
    }
    setState(() {}); // force refresh of systemDevices
  }

  Future onStopPressed() async {
    try {
      FlutterBluePlus.stopScan();
    } catch (e) {
      Snackbar.show(ABC.b, prettyException("Stop Scan Error:", e),
          success: false);
    }
  }

  void onConnectPressed(BluetoothDevice device, ScanResult result) {
    // device.connectAndUpdateStream().catchError((e) {
    //   Snackbar.show(ABC.c, prettyException("Connect Error:", e), success: false);
    // });
    // MaterialPageRoute route = MaterialPageRoute(
    //     builder: (context) => DeviceScreen(device: device, result: result), settings: RouteSettings(name: '/DeviceScreen'));
    // Navigator.of(context).push(route);
  }

  Future onRefresh() {
    if (_isScanning == false) {
      FlutterBluePlus.startScan(timeout: const Duration(seconds: 15));
    }
    setState(() {});
    return Future.delayed(Duration(milliseconds: 500));
  }

  Widget buildScanButton(BuildContext context) {
    if (FlutterBluePlus.isScanningNow) {
      return FloatingActionButton(
        child: const Icon(Icons.stop),
        onPressed: onStopPressed,
        backgroundColor: Colors.red,
      );
    } else {
      return FloatingActionButton(
        child: const Text("SCAN"),
        onPressed: onScanPressed,
        backgroundColor: Config.appThemeColor,
      );
    }
  }

  List<Widget> _buildConnectedDeviceTiles(BuildContext context) {
    return _connectedDevices
        .map(
          (d) => ConnectedDeviceTile(
              device: d,
              onOpen: () {},
              // => Navigator.of(context).push(
              //   MaterialPageRoute(
              //     builder: (context) => DeviceScreen(device: d, BluetoothDevice()),
              //     settings: RouteSettings(name: '/DeviceScreen'),
              //   ),
              // ),
              onConnect: () => {} // onConnectPressed(d),
              ),
        )
        .toList();
  }

  List<Widget> _buildScanResultTiles(BuildContext context) {
    return _scanResults
        .map(
          (r) => ScanResultTile(
            result: r,
            onTap: () => onConnectPressed(r.device, r),
          ),
        )
        .toList();
  }

  _onRefresh() async {
    setState(() {
      timeSelect = 10;
      currentMode = 0;
      _selectedFruits = <bool>[true, false, false, false];
    });
  }

  @override
  Widget build(BuildContext context) {
    final configs = context.read<ConfigBloc>().configs!;
    super.build(context);
    return Scaffold(
      backgroundColor: Color.fromRGBO(201, 201, 201, 1),
      key: scaffoldKey,
      appBar: AppBar(
        title: const Text('Smart Socks Info').tr(),
        actions: [
          IconButton(
            icon: const Icon(
              Feather.rotate_cw,
              size: 22,
            ),
            onPressed: _onRefresh,
          ),
          const SizedBox(
            width: 10,
          )
        ],
      ),
      body: _hasConnectedDevice
          ? SingleChildScrollView(
              controller: _controller,
              child: Container(
                padding: const EdgeInsets.only(
                    top: 80, bottom: 80, left: 10, right: 5),
                decoration: BoxDecoration(
                  image: DecorationImage(
                    image: AssetImage(Config.product),
                    fit: BoxFit.cover,
                  ),
                ),
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    if (currentMode != 3)
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            "${getLevelNumber(1)} mmHg --",
                            style: TextStyle(color: Colors.red[900]),
                          ),
                          const SizedBox(
                            height: 100,
                          ),
                          Text(
                            "${getLevelNumber(2)} mmHg ------",
                            style: TextStyle(color: Colors.red[900]),
                          ),
                          const SizedBox(
                            height: 100,
                          ),
                          Text(
                            "${getLevelNumber(3)} mmHg ------------",
                            style: TextStyle(color: Colors.red[900]),
                          ),
                          const SizedBox(
                            height: 100,
                          ),
                          Text(
                            "${getLevelNumber(4)} mmHg  ------",
                            style: TextStyle(color: Colors.red[900]),
                          ),
                        ],
                      ),
                    Spacer(),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        Switch(
                          // This bool value toggles the switch.
                          value: _isOn,
                          thumbIcon: thumbIcon,
                          activeColor: Colors.green,
                          onChanged: (bool value) {
                            // This is called when the user toggles the switch.
                            setState(() {
                              _isOn = value;
                            });
                          },
                        ),
                        Text(_isOn ? "ON" : "OFF"),
                        const SizedBox(
                          height: 20,
                        ),
                        ToggleButtons(
                          direction: Axis.vertical,
                          onPressed: !_isOn
                              ? null
                              : (int index) {
                                  setState(() {
                                    // The button that is tapped is set to true, and the others to false.
                                    for (int i = 0;
                                        i < _selectedFruits.length;
                                        i++) {
                                      _selectedFruits[i] = i == index;
                                    }
                                    currentMode = index;
                                  });
                                },
                          borderRadius:
                              const BorderRadius.all(Radius.circular(8)),
                          selectedBorderColor: Colors.blue[700],
                          selectedColor: Colors.white,
                          fillColor: Colors.blue[300],
                          color: Colors.blue[900],
                          // disabledColor:Color.fromRGBO(201, 201, 201, 0),
                          textStyle:
                              const TextStyle(fontWeight: FontWeight.bold),
                          constraints: const BoxConstraints(
                            minHeight: 60.0,
                            minWidth: 80.0,
                          ),
                          isSelected: _selectedFruits,
                          children: modes,
                        ),
                        // Spacer(),
                        const SizedBox(
                          height: 20,
                        ),
                        timeSelectWidget()
                      ],
                    ),
                  ],
                ),
              ), // ),
            )
          : RefreshIndicator(
              onRefresh: onRefresh,
              child: _isScanning
                  ? ListView(
                      children: <Widget>[
                        ..._buildConnectedDeviceTiles(context),
                        ..._buildScanResultTiles(context),
                      ],
                    )
                  : Container(
                      alignment: Alignment.center,
                      height: MediaQuery.of(context).size.height * 0.80,
                      width: double.infinity,
                      child: const EmptyPageWithImage(
                        image: Config.noDeviceImage,
                        title: 'No Device Connected',
                        description:
                            "Please click \"SCAN\" button to connect the device.",
                      ),
                    ),
            ),
      floatingActionButton:
          _hasConnectedDevice ? null : buildScanButton(context),
    );
  }

  @override
  bool get wantKeepAlive => true;

  final MaterialStateProperty<Icon?> thumbIcon =
      MaterialStateProperty.resolveWith<Icon?>(
    (Set<MaterialState> states) {
      if (states.contains(MaterialState.selected)) {
        return const Icon(Icons.check);
      }
      return const Icon(Icons.close);
    },
  );

  getLevelNumber(level) {
    var min = 10;
    var max = 20;
    if (currentMode == 1) {
      //mode 2
      min = 20;
      max = 30;
    }
    if (currentMode == 2) {
      //mode 3
      min = 30;
      max = 40;
    }
    switch (level) {
      case 1:
        return min;
      case 2:
        return min + 4;
      case 3:
        return min + 7;
      case 4:
        return max;
    }
  }

  Widget timeSelectWidget() {
    return DropdownButton<int>(
      value: timeSelect,
      icon: Icon(Icons.timer_outlined, color: Colors.blue[900]),
      elevation: 20,
      style: TextStyle(color: Colors.blue[800], fontWeight: FontWeight.bold),
      underline: Container(
        height: 1,
        color: Colors.blue[700],
      ),
      onChanged: !_isOn
          ? null
          : (int? value) {
              // This is called when the user selects an item.
              setState(() {
                timeSelect = value!;
              });
            },
      items: times.map<DropdownMenuItem<int>>((int value) {
        return DropdownMenuItem<int>(
          value: value,
          child: Text("  ${value}s "),
        );
      }).toList(),
    );
  }
}
